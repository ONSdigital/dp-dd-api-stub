// +build production
// Code generated by go-bindata.
// sources:
// data/datasets/AF001EW/dimensions.json
// data/datasets/CPI15/dimensions.json
// data/datasets.json
// DO NOT EDIT!

package stub

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataDatasetsAf001ewDimensionsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x54\x4d\x6f\xdb\x30\x0c\xbd\xe7\x57\x10\x3e\xb5\x58\x91\x38\x8e\xd7\x22\x39\x2d\x6b\xd7\x6d\x87\x0e\x43\x1b\x60\x87\xa1\x07\x46\x62\x6c\x61\xb2\x64\x88\x74\x17\x63\xe8\x7f\x1f\xe4\xc4\xf9\x40\x56\xa0\x3b\xf4\x64\x80\x7a\xe2\x7b\x8f\x8f\xf2\x9f\x01\x40\x62\x74\x32\x83\x64\x7e\x9b\xa6\xe3\x4f\x3f\x92\x8b\x58\x52\x0d\x8b\xaf\x28\xdc\xa2\x32\xae\xf8\x7a\x0a\x10\x23\x96\x0e\xaa\x00\x77\x54\x2d\x29\x30\xf8\x15\x48\x49\x30\x0f\x15\x69\xb8\xf5\x41\x11\xc3\xb2\x85\x40\x6c\x34\x39\x45\x20\x6d\x4d\xb1\xc2\xb4\x8e\x1f\x2c\x68\xd3\xb2\x09\x36\x36\x2c\x45\xea\xd9\x68\x64\xbd\x42\x5b\x7a\x96\x59\x96\xa6\xd3\xe9\x48\xa3\x20\x93\xf0\xe8\x48\x46\x45\x82\xf1\x24\x99\x41\xb4\x02\x90\x68\x62\x15\x4c\x2d\xc6\xbb\xd8\x6d\x51\x1a\x86\xed\x5d\xa8\x83\x7f\x32\x9a\x18\xb2\x74\x3c\x86\x6b\x72\xdc\x30\x10\x8b\xa9\x50\x88\x41\x4a\x14\x50\x16\x99\xcd\xaa\x85\x86\x1b\xb4\xbd\x6c\xe1\xa8\x53\xc3\xf8\x12\xd0\x69\xf0\x4f\x14\xe0\x77\xe9\x01\x03\x41\x75\x6c\x1c\x3b\xe3\xab\x97\x8c\x9f\x95\xbe\x61\x2a\xbd\xd5\xe0\x03\x28\x5f\x55\x8d\x3b\xe0\x39\xbf\xe8\x47\x13\x79\x36\xe3\x19\xc2\xa2\xa4\x03\x9d\x91\x14\x19\xa2\xd8\x8d\x05\x8d\xed\x05\x64\x57\x70\x87\x41\x95\x9d\xb9\x61\x37\x9e\x18\xa4\x77\x82\x4a\x76\xf3\x01\x48\x1c\x56\x9b\xe4\x2c\xad\x11\x3e\x06\xd4\x96\xda\x2d\x1e\x20\xa1\x0a\x4d\x17\x44\xed\xeb\xa1\x71\x2b\xff\xc1\x3b\x1e\x16\x6c\x86\x85\x7f\x1a\x36\xbf\xf6\xc8\xba\xf4\xae\xeb\xf4\x2e\xcf\xe1\x2c\x3d\x1f\x4f\xb2\x29\xe4\x79\x3e\xbd\xca\x92\x0e\xf3\xbc\x15\x11\xc8\x12\x32\xdd\xa0\x74\xf0\x6c\x02\x77\xd8\x46\x9d\x79\x2f\xd3\xd1\x5a\xee\x8f\x51\x0b\x0f\x4b\x02\x74\xce\x37\x4e\x91\xde\x21\x31\x46\x8b\xf6\x41\x50\x0c\x8b\x51\x9c\xcc\x40\x42\x43\xdb\x73\x64\xf6\xca\xa0\x90\xfe\xde\x2c\xad\x51\x1d\x3c\x62\x7e\xf6\xb2\x5f\xb3\x60\xd9\xde\xe5\x6b\xe0\x93\xff\x83\xe7\x9b\xf1\x3c\x6e\x25\x57\x24\xa5\xd7\xde\xfa\xa2\x4d\x66\xe0\x1a\x6b\xb7\x07\x42\xa1\xe2\xb9\xd3\xd7\xde\x69\xd3\xfb\x48\xbe\x8d\xe6\xf1\x7e\x37\xdc\x44\x9b\x8a\x1c\x1f\x59\xdc\x05\xbd\x79\xd7\x37\x69\x9a\x8e\xb3\xf7\x7b\x85\x7d\xfe\x0f\xb4\xde\x17\xe3\x6e\xc6\x22\x0b\x3a\x8d\x41\x1f\x18\x32\x14\xe2\x5e\x19\x85\x71\x2d\x56\x68\x99\x0e\xd3\xfd\x27\x5d\x7e\x4a\x77\xbf\x7b\x07\x8b\xc8\xf5\x56\xcc\x93\x53\xe6\x79\xf1\x76\x74\x97\xa7\x74\xdd\xcf\x65\xb7\x9e\x68\xe1\x33\xf9\x22\x60\x5d\xb6\xf0\x65\x4b\xd1\x9e\xea\x29\x7a\xd0\x8b\x82\xe2\x92\x6f\xf4\x0c\x00\x1e\x07\xcf\x83\xbf\x01\x00\x00\xff\xff\xea\x75\x8a\x95\xbd\x05\x00\x00")

func dataDatasetsAf001ewDimensionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataDatasetsAf001ewDimensionsJson,
		"data/datasets/AF001EW/dimensions.json",
	)
}

func dataDatasetsAf001ewDimensionsJson() (*asset, error) {
	bytes, err := dataDatasetsAf001ewDimensionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/datasets/AF001EW/dimensions.json", size: 1469, mode: os.FileMode(420), modTime: time.Unix(1485775328, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDatasetsCpi15DimensionsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x97\x41\x6b\xdb\x30\x14\xc7\xef\xf9\x14\xc2\xa7\x16\x52\x70\xd2\x36\xdb\x72\xcb\xc8\x4a\x56\xd6\x39\xd0\xdc\x4a\x0f\x2f\xca\xab\x2d\x26\xcb\x9a\x2c\x07\xca\xd8\x77\x1f\x76\x62\x47\x6e\xd4\xa1\xf2\x7c\x2a\xc8\xd6\x4f\xff\x67\xbd\xdf\xa3\x79\x1a\x31\xf6\x67\xc4\x18\x63\x91\xd8\x45\x73\x16\x3d\xae\xe3\x38\x8e\x27\xd1\xf8\xb0\xa8\x20\xc7\x66\x59\x23\x17\x20\x19\xa4\xa9\xc1\x14\x2c\xb6\x2f\xd8\x57\xdd\xbc\xc0\x25\x94\xa5\x78\x11\x1c\xac\x28\x54\xfb\x34\x13\x68\xc0\xf0\x4c\x70\x90\xd1\x9c\x59\x53\xe1\xf1\x49\xa1\xeb\xf7\xca\x68\xce\x9e\x9a\x85\x36\x86\x13\xe5\x2e\x49\x96\x4e\x96\x5e\x9e\x8b\x78\x72\xc9\xee\x8a\x62\xc7\x40\xed\x98\x2a\xd4\x15\x48\x5e\x64\x85\x14\x9c\x6d\x71\x8f\x06\x52\x2c\xa3\xe3\xbe\xbf\xe3\xf7\x8e\x48\xd6\x9b\x78\xea\xe3\xd7\xe8\xb0\xed\xd7\xbe\xed\x5f\x0d\xc2\x21\x1a\x47\x83\x20\x03\xa3\xdc\xf8\x58\x0f\x08\x36\x6c\xfb\xad\xb7\x12\x51\x66\x61\xdb\x67\xde\xd3\x85\xfc\x35\x66\x3c\x43\x2c\xb1\x29\x08\xd3\x34\xb0\x9a\x4f\x3e\x5e\x22\x64\xd9\x70\x5e\xc0\x06\x72\x3e\x7b\xcb\x32\x95\x08\xf8\x2c\xab\x6f\x8b\x1f\x9b\x55\x1c\xfb\x6f\xf9\x22\x9e\x5e\xb2\x15\x82\xb4\x81\x9f\xc8\x4b\x79\xc0\x5d\xdd\xdf\x4c\x9b\x62\x57\x71\x5b\x8e\x19\x68\x2d\x05\x28\x8e\x87\x52\xf1\x77\x25\x74\x8e\x2a\xf0\x1a\xbd\x1d\xb5\xce\xc0\xe4\xc0\xb1\xb2\xbd\xb3\x08\x7d\x95\xd8\x0c\x0d\xcb\x8f\xe1\xeb\x9c\xf5\x02\xe8\xe6\x88\x8f\x66\xf6\xb6\x5e\x52\xd9\x2b\x0d\x56\xa0\xb2\xac\x44\xb3\x17\x3c\xd4\x49\x7f\x2b\x1e\xa3\xb6\xa8\x26\xb3\x06\x03\xf9\x9b\x07\x84\xf6\x5c\xa2\xb2\x1f\x26\x79\x1b\xf4\xbb\x7a\x5b\x7b\x18\xec\xcb\xff\x4a\xef\x55\x7c\x9e\xb2\xf9\xfb\x3c\x3a\x1e\xd1\x9b\xeb\x9b\x7a\x92\x4e\xce\xe6\xfa\x46\xe4\x67\xa3\xdc\x3a\x6b\xa4\x01\xfe\xfe\x74\xc5\xad\xa9\xc0\xbc\xb2\x69\x3c\xb9\xa6\x98\x57\x47\xa3\x42\x16\xda\x08\x49\x4f\x42\x2e\xe6\xbe\x52\x48\x67\x48\x72\x8e\x45\x95\x56\xa5\xa5\x52\x1e\x51\x5b\xcc\xb7\x68\xa8\xa0\x84\xdb\x62\x00\xcc\xcf\x62\x3f\x48\x9c\x25\xf2\x41\x38\xf7\xa0\x5a\x03\x6e\x28\xff\xa7\x38\x26\x51\x38\x9d\x49\x14\x48\x67\x12\x2d\x09\xb9\x98\xd6\x24\x1a\x43\x92\x73\x9c\x4c\xa2\x50\x7a\x26\x51\x40\x8e\x49\x14\x8c\x6b\x12\x85\xe3\x9a\x44\xba\xa9\x93\x49\xb7\x03\x99\x44\xe1\x74\x26\x51\x20\x9d\x49\xb4\x24\xe4\x62\x5a\x93\x68\x0c\x49\xce\x71\x32\x89\x42\xe9\x99\x44\x01\x39\x26\x51\x30\xae\x49\x14\x8e\x6b\x12\xe9\xa6\x4e\x26\xcd\x06\x32\x89\xc2\xe9\x4c\xa2\x40\x3a\x93\x68\x49\xc8\xc5\xb4\x26\xd1\x18\x92\x9c\xe3\x64\x12\x85\xd2\x33\x89\x02\x72\x4c\x9a\x79\x7e\xc6\x8c\x9e\x47\xff\x02\x00\x00\xff\xff\x7a\x6a\x2d\xe1\xa2\x12\x00\x00")

func dataDatasetsCpi15DimensionsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataDatasetsCpi15DimensionsJson,
		"data/datasets/CPI15/dimensions.json",
	)
}

func dataDatasetsCpi15DimensionsJson() (*asset, error) {
	bytes, err := dataDatasetsCpi15DimensionsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/datasets/CPI15/dimensions.json", size: 4770, mode: os.FileMode(420), modTime: time.Unix(1485775251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _dataDatasetsJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xa4\x56\xdb\x6e\x22\x47\x10\x7d\xe7\x2b\x4a\xf3\x04\x0a\xe1\x66\x76\x2d\x23\x45\x09\x21\x6b\x85\x8d\xbc\x1e\x79\x89\xa2\x28\xca\x43\x31\x53\x30\x2d\xf7\x65\xb6\xab\x07\x8c\x56\x96\xf2\x11\xf9\xc2\x7c\x49\xd4\xcd\x00\x33\x2c\x6b\x83\xf6\xc5\x16\xdd\xd5\x5d\xa7\x4e\xd5\x39\x3d\x9f\x1b\x00\x91\x70\xa4\x38\x1a\xc1\x5f\x0d\x00\x80\xcf\xe1\xaf\x5f\x4e\xa3\x11\x44\xe3\xdb\x5e\xaf\xff\xee\x8f\xa8\xbd\x5b\x4e\x0a\x76\x46\x91\xbd\xc5\x44\xe8\xe5\xf4\x74\x90\x13\x4e\x52\x65\x07\xe0\x8e\xd4\x9c\x2c\x83\x59\x80\xcb\x08\xc6\x56\x51\x0a\xb7\xc6\x26\xc4\x30\xdf\x80\x25\x16\x29\xe9\x84\xc0\x6d\x72\xf2\x2b\x4c\x4f\xfe\x1f\x2e\xe9\x70\x6d\x61\xa5\xbf\x34\x73\x2e\x1f\x75\xbb\xd2\x24\x28\x33\xc3\x6e\x34\xe8\xf5\x6e\x6e\xba\x29\x3a\x64\x72\xdc\xfd\x02\x8e\x22\x87\x7e\x37\x1a\xed\xcb\x03\x88\x52\xe2\xc4\x8a\xdc\x09\xa3\xfd\xad\xb3\x4c\x30\x94\x77\x40\x6e\xcd\x4a\xa4\xc4\x30\xe8\xf5\xfb\x30\x21\xcd\x05\x03\xb1\x13\x0a\x1d\x31\xb8\x0c\x1d\x24\x12\x99\xc5\x62\x03\x05\x17\x28\x77\x25\x38\xf6\x98\x53\xe8\xbf\x05\xd4\x29\x98\x15\x59\x58\x67\x06\xd0\x12\xa8\x3a\x09\x18\x48\x58\x7c\x8d\x84\x66\x66\x0a\xa6\xcc\xc8\x14\x8c\x85\xc4\x28\x55\xe8\x4a\x9e\x56\x7b\x47\x93\xcf\xb3\xa5\xaa\x03\xb3\x8c\x2a\x38\x7d\x52\x64\xf0\x60\xb7\x25\xa4\xb8\x69\xc3\xe0\x1a\xee\xd0\x26\x59\x28\xae\xb3\xa7\xc9\x37\xd7\x68\x87\x89\xab\xf1\x04\x10\x69\x54\xdb\x6e\x4a\x7a\x42\xf8\xd9\x62\x2a\x69\x53\x39\x07\x10\x91\x42\x11\x9a\x93\x9b\xbc\x23\xf4\xc2\xfc\x64\x34\x77\x96\x2c\x3a\x4b\xb3\xea\x14\x8f\xf5\xe8\x3c\x33\x3a\xdc\xf8\xdd\x70\x08\xcd\x5e\xab\x7f\x35\xb8\x81\xe1\x70\x78\x73\x3d\x88\xf6\x71\xcf\x15\x60\x96\x24\x21\xd3\x2f\xe8\xc2\xb1\xc1\x15\xdc\xe1\xc6\xe3\x1f\x56\xe1\x6b\x7a\x72\x0f\xf5\xc8\x99\x81\x39\x01\x6a\x6d\x0a\x9d\x50\x5a\x8b\x46\xdf\x7a\x94\x1f\x1d\x3a\xc1\x4e\x24\x5e\x04\xce\x16\x54\x89\x41\x66\x93\x08\x74\x94\xc6\xc5\x5c\x8a\x24\x1c\x39\x88\xa5\x8c\x3a\x67\x20\x07\x75\x06\xce\x39\x72\x75\xf9\x91\xe1\x81\xbe\xbf\x2b\x65\x28\x72\x99\x49\x8d\x34\xcb\x4d\x34\x02\x5d\x48\x59\xd9\x74\x64\x15\x8f\x75\x3a\x31\x3a\x15\xbb\xfa\xa2\x0f\xdd\xf1\xee\xae\xe7\x46\xa5\x1d\x47\xfe\x30\x89\xa7\xfd\x37\x2f\xbb\xc3\x51\xc8\xde\x1b\xc2\x3a\x4c\x8c\xe6\x42\x91\x85\xd8\x0a\xaf\x83\xa9\x4e\xe9\x09\x9a\x93\xfb\xe9\xe4\x3e\x6e\x75\x2e\x16\xff\x51\xb6\xb3\xa4\x5f\xc7\x50\x42\xe0\xfd\x58\x78\x71\xcd\x84\xa2\x20\xb4\x8f\x39\x25\x02\x25\x8c\x97\x4b\x4b\x4b\x74\x04\xcd\xa0\x56\xb3\x00\x4a\x8c\x36\x4a\x24\x80\x89\x13\x2b\xe1\x36\x2d\xaf\xc7\x8a\xab\x70\x66\xd6\x1c\xa4\xaf\xcc\x8a\x14\x69\xe7\x8f\xe5\xdb\xc2\x83\x53\xf8\x3d\x89\xec\x60\x21\x56\x04\x1b\x42\xcb\xb0\x16\x2e\x13\x3a\x6c\xfd\xfe\x5b\x99\x64\xd3\x86\xb9\x35\x8f\xa4\x21\x35\x6b\xed\x01\x2a\xa3\x5d\x16\x10\xae\xd0\x0a\x53\xf0\xce\x9f\x76\x43\x7b\x12\x61\x69\x18\xbb\xe5\xe3\x23\xde\x3f\x52\xb2\x62\xe5\x7d\xca\x1a\x15\x40\x6c\x5b\x03\xcd\x49\x2d\x18\xee\x17\x9e\x38\xb1\x12\xa9\x77\xc3\x2d\xa5\x81\x61\x8f\x2e\x2e\x6c\x6e\x98\x5a\x20\x05\xbb\x4b\x2c\xe7\x3d\x2a\x62\x98\x15\xc9\x23\xd9\xaf\x38\x4e\x92\x8b\xcb\xcc\xe6\xed\xd5\x15\x0c\xdf\xbc\xbd\xe9\xf5\xce\x32\x9b\xfe\x35\xbc\x47\x5d\xa0\x0d\x86\x73\xfd\x8a\xe1\xf4\x87\x70\x4b\x73\x7b\x3a\xfc\x5b\x1c\xe7\x48\xb5\x75\x49\x57\xed\xa8\xca\x63\x4d\x6f\xc7\x53\xbe\x90\xdb\xce\x35\x85\x4e\x64\xe1\x5f\x3b\x94\x12\x86\x20\x74\xea\x27\xf2\xbf\x7f\xfe\x9d\xc4\xd3\x36\x4c\xe2\xe9\xaf\x6d\x78\x88\xa7\x61\xba\x1e\xe2\xe9\xfb\x56\x8d\xe0\xba\x36\x79\xd4\xed\xae\xd7\xeb\x4e\xe8\x48\xe8\x46\xb7\x1c\xd9\xae\xd8\x65\x44\x9d\x86\xa1\x2f\x13\x75\x3f\x29\xc1\xdd\xa4\x84\x57\xee\x94\xa1\x9f\x94\x88\x2a\xb9\x9e\x0f\xf6\x76\x86\x39\x7d\xb8\xff\xfe\xee\xdd\x6c\xfc\xb2\x3d\x7d\x11\xb4\x27\xec\x16\x1f\x69\xaf\x5d\xaf\x42\x50\x82\x59\xe8\x25\xec\x5c\x05\x16\x82\x64\x7a\xb1\x47\xed\x52\xbe\x00\xfd\xdd\x5d\x3c\xfb\xf3\x0c\xf4\xa7\xe2\x5e\x28\x80\x54\xee\x36\x7b\xf8\x17\x03\x3f\x95\xed\xb4\xc3\x1e\x64\x7d\x34\xb7\x47\xe2\x7a\x45\x4d\xaf\xaa\x67\x81\x92\xbf\x5d\x3e\x7e\xb3\x3e\x4f\x8d\xf2\x01\x8d\x12\x53\x68\x5f\xc6\x30\xfc\x72\xc6\xa1\xdc\xff\x62\x87\xd6\x85\xd7\x22\x1a\x41\xaf\xbd\xff\x98\x8e\xc9\xc6\xfe\xc3\x75\x04\xfd\xed\xea\x42\x58\x76\x67\x10\xfc\x63\x8e\x4b\xfa\xa1\x1f\xaa\x8e\xfc\x3b\x70\xe9\x99\xbc\x4c\x7b\x00\xeb\x81\xf8\xfa\xfb\x8d\xe7\xc6\xff\x01\x00\x00\xff\xff\x76\x26\x1c\x9b\xef\x0b\x00\x00")

func dataDatasetsJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataDatasetsJson,
		"data/datasets.json",
	)
}

func dataDatasetsJson() (*asset, error) {
	bytes, err := dataDatasetsJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/datasets.json", size: 3055, mode: os.FileMode(420), modTime: time.Unix(1485775541, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/datasets/AF001EW/dimensions.json": dataDatasetsAf001ewDimensionsJson,
	"data/datasets/CPI15/dimensions.json": dataDatasetsCpi15DimensionsJson,
	"data/datasets.json": dataDatasetsJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"datasets": &bintree{nil, map[string]*bintree{
			"AF001EW": &bintree{nil, map[string]*bintree{
				"dimensions.json": &bintree{dataDatasetsAf001ewDimensionsJson, map[string]*bintree{}},
			}},
			"CPI15": &bintree{nil, map[string]*bintree{
				"dimensions.json": &bintree{dataDatasetsCpi15DimensionsJson, map[string]*bintree{}},
			}},
		}},
		"datasets.json": &bintree{dataDatasetsJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

